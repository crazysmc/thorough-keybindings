import net.ornithemc.ploceus.api.GameSide

plugins {
  alias libs.plugins.loom
  alias libs.plugins.ploceus
}

allprojects {
  version = mod_version
  group = maven_group

  tasks.withType Jar configureEach {
    from rootProject.file('LICENSE')
  }
}

def commonConfig(Project project) {
  def isRoot = project == rootProject

  project.java {
    toolchain.languageVersion = JavaLanguageVersion.of 8
    withSourcesJar()
  }

  switch (project.findProperty('environment')) {
    case 'client':
      project.loom.clientOnlyMinecraftJar()
      project.ploceus.clientOnlyMappings()
      project.ploceus.side = GameSide.CLIENT
  }

  project.dependencies {
    minecraft group: 'com.mojang', name: 'minecraft', version: project.minecraft_version
    mappings project.ploceus.featherMappings(project.feather_build)
    if (project.hasProperty 'raven_build')
      exceptions project.ploceus.raven(project.raven_build)
    if (project.hasProperty 'sparrow_build')
      signatures project.ploceus.sparrow(project.sparrow_build)
    if (project.hasProperty 'nests_build')
      nests project.ploceus.nests(project.nests_build)
    modImplementation libs.loader
    project.ploceus.addCommonLibraries()
    if (!isRoot) {
      testImplementation libs.junit
      testImplementation libs.loader.junit
      testImplementation libs.mockito
      testImplementation libs.mojang.logging

      if (project != rootProject.project(':ap')) {
        annotationProcessor implementation(it.project(path: ':ap', configuration: 'namedElements'))

        if (project != rootProject.project(':core')) {
          implementation it.project(path: ':core', configuration: 'namedElements')
        }
      }
    }
  }

  project.test {
    useJUnitPlatform()
    workingDir = rootProject.layout.buildDirectory.file 'test-run'
    workingDir.mkdir()
  }

  project.processResources {
    def f = project.file('gradle.properties')
    if (f.exists())
      inputs.file(f)
    filesMatching 'fabric.mod.json', {
      expand project.properties
    }
  }

  if (!isRoot)
    rootProject.dependencies {
      include project
    }
}

commonConfig project

base.archivesName = mod_id
