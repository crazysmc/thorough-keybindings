import com.vdurmont.semver4j.Requirement
import com.vdurmont.semver4j.Semver

import java.util.regex.Pattern

plugins {
  id 'fabric-loom' version libs.versions.loom
  id 'ploceus' version libs.versions.loom
}

version = "$mod_version+mc${libs.versions.minecraft.get()}"
group = maven_group
base.archivesName = mod_id

repositories { // for osl 0.13.4
  maven {
    name = 'Quilt Releases'
    url = 'https://maven.quiltmc.org/repository/release'
  }
}

dependencies {
  minecraft libs.minecraft

  mappings loom.layered {
    mappings variantOf(libs.feather) { classifier 'v2' }
    addLayer ploceus.nestedMappings()
  }
  if (libs.hasProperty 'nests')
    nests libs.nests

  modImplementation libs.loader
  ploceus.addCommonLibraries()
  ploceus.dependOsl libs.versions.osl.get()

  implementation project(':ap')
  annotationProcessor project(':ap')
  testImplementation libs.junit
}

java {
  sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8
  withSourcesJar()
}

def generatedJava = layout.buildDirectory.dir 'generated/sources/versioned/java'
def generatedResources = layout.buildDirectory.dir 'generated/sources/versioned/resources'

sourceSets {
  versioned {
    java { compileClasspath += main.compileClasspath + main.runtimeClasspath }
  }
  main.java.srcDir generatedJava
  main.resources.srcDir generatedResources
}
idea.module.generatedSourceDirs += generatedJava.get().asFile

def mc = new Semver(libs.versions.skyrising.get(), Semver.SemverType.LOOSE)
def token = Pattern.compile(/^\s*(\/\/|#)\$/)
def preprocessor = { String task, src, dst ->
  tasks.register task, Copy, {
    group = BasePlugin.BUILD_GROUP
    inputs.property 'mc', mc.toString()
    from src
    into dst
    doFirst { delete dst }
    eachFile {
      def inc = true
      filter { String line ->
        def matcher = token.matcher line
        if (matcher.find()) {
          line = line.substring matcher.end()
          if (line.startsWith 'if') {
            inc = Requirement.buildNPM line.substring(2) isSatisfiedBy mc
            return null
          }
        }
        return inc ? line : null
      }
      if (!it.size)
        it.exclude()
    }
  }
}
def preprocessJava = preprocessor 'preprocessJava', sourceSets.versioned.java, generatedJava
def preprocessResources = preprocessor 'preprocessResources', sourceSets.versioned.resources, generatedResources
def preprocess = tasks.register 'preprocess', {
  group = BasePlugin.BUILD_GROUP
  dependsOn preprocessJava, preprocessResources
}
tasks.named 'compileJava', { dependsOn preprocess }
tasks.named 'sourcesJar', { dependsOn preprocess }
tasks.named 'processResources', { dependsOn preprocessResources }

test {
  useJUnitPlatform()
}

processResources {
  inputs.property 'properties', project.properties.toString()
  filesMatching 'fabric.mod.json', {
    expand project.properties + [range: libs.versions.range.get()]
  }
}

runClient {
  systemProperty 'mixin.debug.export', true
  systemProperty 'mixin.debug.export.filter', 'net.minecraft.**'
  args += ['--userProperties', '{}']
}

tasks.withType Jar configureEach {
  from rootProject.file('LICENSE')
  from project(':ap').tasks.compileJava.outputs
}
