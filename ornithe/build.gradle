plugins {
  id 'fabric-loom' version libs.versions.loom
  id 'ploceus' version libs.versions.loom
}

version = "$mod_version+mc${ornitheLibs.versions.minecraft.get()}"
group = maven_group
base.archivesName = mod_id

def ap = project ':ap'

dependencies {
  minecraft ornitheLibs.minecraft
  mappings ploceus.featherMappings(ornitheLibs.versions.feather.get())
  if (ornitheLibs.versions.hasProperty 'nests')
    nests ploceus.nests(ornitheLibs.versions.nests.get())

  modImplementation libs.loader
  ploceus.addCommonLibraries()
  ploceus.dependOsl ornitheLibs.versions.osl.get()

  implementation ap
  annotationProcessor ap
  testImplementation libs.junit
}

java {
  toolchain.languageVersion = JavaLanguageVersion.of 8
  withSourcesJar()
}

def generatedJava = layout.buildDirectory.dir 'generated/sources/versioned/java'
def generatedResources = layout.buildDirectory.dir 'generated/sources/versioned/resources'

sourceSets {
  versioned {
    java { compileClasspath += main.compileClasspath + main.runtimeClasspath }
  }
  main.java.srcDir generatedJava
  main.resources.srcDir generatedResources
}
idea.module.generatedSourceDirs += generatedJava.get().asFile

def preprocessJava = tasks.register 'preprocessJava', PreprocessorTask, {
  group = BasePlugin.BUILD_GROUP
  minecraft = ploceus.normalizedMinecraftVersion()
  from sourceSets.versioned.java
  into generatedJava
}

def preprocessResources = tasks.register 'preprocessResources', PreprocessorTask, {
  group = BasePlugin.BUILD_GROUP
  minecraft = ploceus.normalizedMinecraftVersion()
  from sourceSets.versioned.resources
  into generatedResources
}

def preprocess = tasks.register 'preprocess', {
  group = BasePlugin.BUILD_GROUP
  dependsOn preprocessJava, preprocessResources
}

tasks.named 'compileJava', { dependsOn preprocess }
tasks.named 'sourcesJar', { dependsOn preprocess }
tasks.named 'processResources', { dependsOn preprocessResources }

test {
  useJUnitPlatform()
}

processResources {
  inputs.property 'properties', project.properties.toString()
  filesMatching 'fabric.mod.json', {
    expand project.properties + [range: ornitheLibs.versions.range.get()]
  }
}

runClient {
  systemProperty 'mixin.debug.export', true
  systemProperty 'mixin.debug.export.filter', 'net.minecraft.**'
  args += ['--userProperties', '{}']
}

tasks.withType Jar configureEach {
  from rootProject.file('LICENSE')
  from ap.tasks.compileJava.outputs
}
